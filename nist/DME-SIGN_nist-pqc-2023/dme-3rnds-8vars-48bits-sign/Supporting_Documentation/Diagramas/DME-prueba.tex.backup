\documentclass[12pt,a4paper]{amsart}

% for computer reading only
%\usepackage[letterpaper,left=1.2in,right=1.2in,top=1in,bottom=1in]{geometry}

%\title{The prime divisors of the period and index of a Brauer class}
%\author{Benjamin Antieau and Ben Williams}
\usepackage{color}

\addtolength{\hoffset}{-1cm} \addtolength{\textwidth}{2cm}
\linespread{1.2}


%\usepackage{palatino, euler}
% \usepackage{setspace}
% \onehalfspacing

% AMSRefs is a big pile of garbage and has to go after euler and before xy and hyperref
%\usepackage{amsrefs}

\usepackage[pdfstartview=FitH]{hyperref}
\usepackage[english]{babel}
%\usepackage{geometry}
\usepackage[utf8x]{inputenc}
\usepackage{amsmath, amssymb, amsthm}
\usepackage{graphicx}
\usepackage{enumitem}
\usepackage{soul}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{xy}
% \usepackage{chngcntr}
\xyoption{all}
\usepackage{amsmath,amssymb}
\usepackage[utf8x]{inputenc}
\usepackage{amsfonts}
\usepackage[T1]{fontenc}
\usepackage{tikz}
\usepackage{pgf}
\usepackage{xcolor}
\usepackage{mathrsfs}
\usetikzlibrary{cd}


\newif\iftikz
\tikztrue

\iftikz
\usepackage{tikz}
\usetikzlibrary{%decorations.markings,
%matrix,
calc%,arrows.meta
}
\fi

\newtheorem{thm}{Theorem}[section]
\newtheorem{conj}[thm]{Conjecture}
\newtheorem*{yano}{Yano's Conjecture}
\newtheorem{prop}[thm]{Proposition}
\newtheorem{prop0}{Proposition}
\newtheorem{cor}[thm]{Corollary}
\newtheorem{lema}[thm]{Lemma}
\newtheorem{caso}{Case}
\newtheorem{prps}{Properties}
\newtheorem{clm}[thm]{Claim}
\theoremstyle{remark}
\newtheorem{remark}[thm]{Remark}
\theoremstyle{definition}
\newtheorem{dfn}[thm]{Definition}
\newtheorem{ntc}[thm]{Notation}
\newtheorem{ejm}[thm]{Example}
\newtheorem{paso}{Step}
%\numberwithin{equation}{section}
\DeclareMathOperator{\ord}{ord}






\DeclareMathOperator{\spec}{Spec}
\DeclareMathOperator{\supp}{Supp}
\DeclareMathOperator{\In}{In}
\DeclareMathOperator{\Gr}{Gr}
\newcommand\balpha{\boldsymbol{\alpha}}
\newcommand\bdx{{\mathbf x}}
\newcommand\bdy{{\mathbf y}}
\newcommand\bn{{\mathbb N}}
\newcommand\bz{{\mathbb Z}}
\newcommand\bq{{\mathbb Q}}
\newcommand\bc{{\mathbb C}}
\newcommand\br{{\mathbb R}}
\newcommand{\cD}{{\mathcal D}}
\newcommand{\cO}{{\mathcal O}}
\newcommand{\cC}{{\mathcal C R_\mu }}
\newcommand{\cA}{{\mathcal E}}
\DeclareMathOperator*{\res}{Res}

\newcommand\gfq{{\mathbb{F}_q}}






%    Absolute value notation
\newcommand{\abs}[1]{\lvert#1\rvert}
%    Blank box placeholder for figures (to avoid requiring any
%    particular graphics capabilities for printing this document).
\newcommand{\blankbox}[2]{%
  \parbox{\columnwidth}{\centering
%    Set fboxsep to 0 so that the actual size of the box will match the
%    given measurements more closely.
    \setlength{\fboxsep}{0pt}%
    \fbox{\raisebox{0pt}[#2]{\hspace{#1}}}%
  }%
}

\def\f{f^{-1}\{0\}}


\newcommand\enet[1]{\renewcommand\theenumi{#1}
\renewcommand\labelenumi{\theenumi}}



\title[DME]{DME a  public key, signature and KEM system based on double exponentiation  with matrix exponents}




%    Information for first author
\author[I. Luengo]{I. Luengo${^1}$}
%    Address of record for the research reported here
\address{Departament of Algebra, Geometry and  Topology, Complutense University of Madrid,
Plaza de las Ciencias s/n, Ciudad Universitaria, 28040 Madrid, SPAIN}
%    Current address
\curraddr{}
\email{iluengo@ucm.es}




\date{}



\begin{document} 

\maketitle

The system presented here for the NIST call is a multivariate public key cryptosystem based on a new construction of the central maps,
that allow the polynomials of the public key to be of an arbitrary degree. In order to get a reasonable size for the public key one has 
to use a small number of variables and special non-dense linear maps at both ends of the composition. 

We will present the algorithms and construction of the system in general, but
for the implementation we will choose parameters that give polynomials with $6$ to $12$ variables. 
We will build the central map using a vectorial exponentiation with matrix exponents as follows:

Let us take a finite field $\gfq$, $q=p^e$, and a matrix $A=(a_{ij})\in {\mathcal M}_{n\times n}(\bz_{q-1})$ 
one can define a kind of exponentiation of vectors by using a monomial map $G_A$ associated to the matrix $A$ as follows:
\begin{equation}
 G_A: \gfq^n \to \gfq^n: \quad G_A(x_1,\ldots, x_n)=(x_1^{a_{11}}\dots   x_n^{a_{1n}}, \ldots, x_1^{a_{n1}}\dots  x_n^{a_{nn}}).  
\end{equation}

The following two facts are easy to verify:
\begin{enumerate}
\item[a)] If $A,B\in {\mathcal M}_{n\times n}(\bz_{q-1})$ and $C=B A$, then the composition $G_C=G_B \circ G_A$.
\item[b)] If $ \det(A) =\pm 1$ and the inverse matrix $A^{-1}\in {\mathcal M}_{n\times n}(\bz)$, then $G_{A}$
is invertible on $(\gfq\setminus \{0\})^n$ and the inverse is given by $G_{A^{-1}}$.
\end{enumerate}

Note that if the matrix has $r$ entries different from zero in a column $k$, then the product 
of $r$ copies of $\gfq$ is mapped to $O=(0,\ldots, 0)$ so $G_A$ as a map in $\gfq^n$ 
is a univariate polynomial of degree at least~$q^r$.

This kind of maps are extensively used in Algebraic Geometry,
they produce birational maps. In Projective Geometry they are  also called Cremona transformations. 
In \cite{D} this Cremona  transformations are used to produce multivariate public key cryptosystem.




If $\det(A)\ne \pm 1$ the monomial map is not birational, in fact one has,


\begin{prop0}
 Let $G_A: \gfq^n \to \gfq^n$  be a monomial map as $(1)$ and $K$ an algebraically closed field of any characteristic 
then the monomial map $G_A$ has geometric degree $d:=|\det(A)|$ on $(K\setminus \{0\})^n$,
that is,  for $x\in (K\setminus \{0\})^n$, $G_A^{-1}(x))$  has generically d preimages.
\end{prop0}



Now if we take $A\in {\mathcal M}_{n\times n}(\bz_{q-1})$ then:

\begin{thm}
Let  $A\in {\mathcal M}_{n\times n}(\bz_{q-1})$ and $G_A: \gfq^n \to \gfq^n$  be the corresponding  monomial map.
If $\gcd(\det(A), q-1)=1$ and $b:=\det(A)^{{-1}} \in  \bz_{q-1}$, $B:=b Ad(A)$ then $A^{-1}=B   \in {\mathcal M}_{n\times n}(\bz_{q-1}).$
\end{thm}
This is easy to verify because  $b \det(A)=1+\lambda (q-1) $ and if $I_n$ is the identity matrix then $A B=\det(A)   I_n (\mod   q-1).$




We can use this fact to build a multivariate PKC in the standard way by putting in the entries of the matrix $A$ 
powers of $q$. If each row has 2 entries  $q^{a_{ij}}$  then after composing with two linear maps at both ends one get a quadratic 
public key (see \cite{D}). In our case we made extensive computer test and we arrive to the conclusion that those systems are not safe against 
Gröbner bases attack for reasonable key size, what it  happens with most multivariate PKC. 

In order to make an stronger system against algebraic cryptoanalisys we will produce a system with the following design options:

\begin{itemize}
 \item  We allow the entries of the matrix $A$ 
to be of the for $p^a$ instead of $q^a (q=p^a)$, 
this will make the final polynomials with arbitrary degree up to $q$,

\item the determinat $d=\det(A)$ has an expansion in base $d$  with many non zero digits.
\end{itemize}


These two conditions make the resulting system safe against Grobner basis attack but in order to make it safe against structural attacks  we propose as central maps to use to exponentials in two differnt intermediate fields, $\gfq^n$ and $\gfq^m$ 
and the resultant public key will be polinomials in $n-m$ variables with degree up to $q$ in each variable. 
In the system we implemented we use the parameters $m=3, n=2$ and the the public key $F$ has $6$ polinomials with $64$ 
monomials each. 

For convenience we denote the coordinates in  $(\gfq)^{nm}$ as 
\[
\underline{x}=(x_{11},\ldots,x_{1n},\ldots, x_{n1},\ldots,  x_{nm}).
\] 


We will use  a padding $H:\mathbb{F}_p^N\to \mathbb{F}_q^{nm}$ by adding $S\geq m$ random elements of $\mathbb{F}_p $ in such a way 
that the coordinates $x_{1n},x_{2n},\ldots, x_{nm}$ of $H(u)=(x_{11},\ldots ,x_{nm})$  
are different from zero. The padding can be chosen in several different ways. For instance, one can add only one bit in each $x_{in}$
and the encryption is deterministic or we can add randon bits to each component $x_{ij}$ in oder to adrees the IND-CPA security.   

\newpage


The public key is $K_P=(h, \pi_0,F),$  where $F: \mathbb{F}_	q^{nm}\to \mathbb{F}_	q^{nm}$ 
is a map obtained as  composition of five maps, $F=L_3 \circ G_2 \circ L_2 \circ G_1 \circ L_1$, 
according to the diagram:
%DIAGRAMA1
\begin{center}
\input{diagrama1.pgf}
\end{center}

The maps $L_1, L_2$ and $L_3$ are $\mathbb{F}_	q$-linear isomorphims and 
$L_1$ satisfies that  for every $x\in H( \mathbb{F}_p^N )$, $L_1(x)\in(\mathbb{F}_q^n
\setminus \{0\})^m$. The map $L_2$ is designed to verify the condition:
$$
\forall y\in (\mathbb{F}_q^n\setminus \{0\})^m,    \,\, L_2(y) 
\in (\mathbb{F}_q^m\setminus \{0\})^n.
$$

The maps $G_1$ and $G_2$ are monomial maps with the invertible determinant and entries  
powers of $p.$  With all the above conditions it is clear that $F$ is injective in $H(\mathbb{F}_p^N)$ 
and the components of $F$ and $F^{-1}$ 
are  given by polynomials in $\mathbb{F}_q [x_1,\ldots, x_{mn}]$. 
The maps $G_1$ and $G_2$ are chosen in such a way that the polynomial 
$F$ have few monomials and the polynomial $F^{-1}$ has a  huge number of monomials. 
For instance,  for the parameters that we choose for the implementation, $(M=3, n=2, s=2, t=2)$, 
we get that each component of $F$ has $64$ monomials and that each component of $F^{-1}$ 
has at least $2^{100}$ monomials.

Let's  describe the five maps in detail. 

The map $L_1=\tilde{\pi_1}\circ \tilde{L}_1\circ \tilde{ l} $  
is obtained as composition of three linear $\mathbb{F}_q$-isomorphims  according to the diagram 
(2).
\begin{center}
\input{diagrama2.pgf}
\end{center}The map $\tilde{\pi_1}=(\pi_1,\ldots,\pi_m)$ is defined by using an 
$\mathbb{F}_q$ linear isomorphims 
$\pi_1: \mathbb{F}_q^n \to \mathbb{F}_{q^n}, \pi_1(v_1, \ldots, v_n)=\alpha_1 v_1+ \ldots+\alpha_n v_m$,
where  $\{ \alpha_1,\ldots,\alpha_n\}$ is a fixed $\mathbb{F}_q$  basis of $\mathbb{F}_{q^n}.$





The isomorfism $\tilde{L}_1=(L_{11},\ldots,L_{1m})$  is defined by its components $L_{1i}:\mathbb{F}_{q}^n\to .\mathbb{F}_{q}^n$
given by $L_{1i}(\underline{x}_i)=\underline{x}_i A_{1i},$ where $A_{1i}\in GL_n (\mathbb{F}_{q}).$



The isomorfism  $\tilde{ l}$ is obtained by grooping the components of $x$ in $m$ vectors 
according to its index $h(x_1,\ldots,x_{nm})= (\underline{x}_1,\ldots,\underline{x}_m )),$ where 
$\underline{x}_i=(x_{i1},\ldots, x_{in}).$






The $\gfq$-linear  isomorphism $L_2=\tilde{\pi_1}^{-1}\circ M \circ \tilde{ L}_2\circ \tilde{\pi_2} $ is a composition according to the 
diagram (3).
\begin{center}
\input{diagrama3.pgf}
\end{center}
The "mixing"  isomorphism $M$ transforms the $m$ vectors of $\gfq^n$ in $n$ vectors of $\gfq^m$  in such a way that 
the components of $\underline{x}_1,\ldots,\underline{x}_n$ are  placed  in the first $n$ components of 
$\underline{x}'_1,\ldots, \underline{x}'_n$ and
the components of $\underline{x}_{m-n+1},\ldots,\underline{x}_m$ are placed in the last $m-n$ components of  
$\underline{x}'_1,\ldots, \underline{x}'_n$.
For instance a way to produce such mixing is the following
composition of maps 
\begin{center}
\input{diagrama4.pgf}
\end{center}
That is, if we write
the first matrix in two blocks  $\binom{M_1}{M_2} $, where  $M_1$ is given by the first $n$ rows and $M_2$ is given by the mixim $M$ 
the last rows  the mixing map send  $\binom{M_1}{M_2} $ to $(M_1, M_2^t)=(M_1,M_2')$
Any bijective map that send the $(m-n)\times n$ entries of $M_2$ in the $n\times (m-n)$ entries of $M'_2$will be also valid, 
but the final number of monomial depends on the mixing.



For instance if we take  $m=4$ and $n=2$  we can have the next two mixing of    
$\binom{ x_{11} \quad x_{12}}{x_{41} \quad x_{42} }$ and




\begin{equation}
\binom{ x_{11} \, x_{12} \,   x_{31} \, x_{41}}{x_{21} \, x_{22} \,   x_{32} \, x_{42}   }   
\end{equation}
or

\begin{equation}
  \binom{ x_{11} \, x_{12} \quad   x_{31} \, x_{32}}{x_{21} \, x_{22} \,   x_{41} \, x_{42}   }   
\end{equation}


When we explain below how to calculate the monomials of  $F_i$ that (2) 
produces more mixing and $144$ monomials and (3) produce less mixing but $64$ monomials  in each component.

This construction of the mixing map $M$ guarantees that if $x\in ({\mathbb{F}}_{q^n}\setminus  \{0\} )^m$   then 
$x' \in ({\mathbb{F}}_{q^m}\setminus  \{0\} )^n$ but there is not implication in the  other sense, 
that is $x' \in ({\mathbb{F}}_{q^m}\setminus  \{0\} )^n$ do not implies  
$x\in ({\mathbb{F}}_{q^n}\setminus  \{0\} )^m$. 
This fact means that one can always encript and decrypt a 
message but there are messages that can not be signed.


The $\mathbb{F}_q$-linear isomorphism $L_3=e \circ\tilde{L}_3\circ\pi_2^{-1}$
is defined as
\begin{center}
\input{diagrama5.pgf}
\end{center}
The morphism $\tilde{L}_3$ is defined as $\tilde{L}_3=(L_{31},\dots,L_{3n})$ where
$L_{3j}(x'_j)=x_j' A_{3j}$, $A_{3j}\in\mathscr{M}_{n\times n}(\gfq)$ and
$\det(A_{3j})\neq 0$.

The main part of the design of the system are the two exponential maps
$G_1$ and $G_2$ build with monomial maps as follows:
\[
G_1(x_1,\dots,x_m)=(x_1^{a_{11}}\cdot\ldots\cdot x_m^{a_{1m}},\dots,x_1^{a_{m1}}\cdot\ldots\cdot x_m^{a_{mm}}),\qquad 
G_1:(\mathbb{F}_{q^n})^m\to(\mathbb{F}_{q^n})^m
\]
where $A_1=(a_{ij})\in\mathscr{M}_{m\times m}(\mathbb{Z}_{q^n-1})$ such that $d'_1=\det(A_1)$ is prime with $q^n-1$;
\[
G_2(x'_1,\dots,x'_n)=({x'_1}^{b_{11}}\cdot\ldots\cdot {x'_n}^{b_{1n}},\dots,{x'_1}^{b_{n1}}\cdot\ldots\cdot {x'_n}^{b_{nn}}),\qquad 
G_1:(\mathbb{F}_{q^m})^n\to(\mathbb{F}_{q^m})^n
\]
where $B_2=(b_{ij})\in\mathscr{M}_{n\times n}(\mathbb{Z}_{q^m-1})$ such that $d'_2=\det(B_2)$ is prime with $q^m-1$

If $\underline{x}=(x_{11},\dots,x_{nm})\in\gfq^{nm}$ are the inicial coordinates, then
the composition of the five maps $L_1,G_1,L_2,G_2$ and $G_3$ allow us to compute 
the components of $F(\underline{x})$ as polynomials 
$F_i\in\mathbb{F}_q[x_{11},\dots,x_{nm}]$. In order to keep small the number
of monomials, we choose the matrices $A_1$ and $B_2$ with the following properties:

\begin{enumerate}
 \item The entries of $A_1$ and $B_2$ are of the form $p^a$.
 \item We fix two integers $s$ and $t$ such that the rows of $A_1$
 have at most $s$ non zero entries and the rows of $B_2$ have at most
 $t$ non zero entries. One can compute the monomials in the $F_i$
 with the algorithm described below, resulting that the total number
 of monomials is 
$MON=(b\cdot n^s)^t$ where $b$ depends on the mixing map~$M$.
\item The inverse maps $G_1^{-1}$ and $G_2^{-1}$ can be computed in the same
way from the inverse matrix of $A_1$ and $B_2$ respectively and
$F_1^{-1}$ is also polynomial.
\end{enumerate}
If the number of monomials in $F^{-1}$ is not very big, one can get the coefficient
of the polynomial by computing enough number of pairs $(x,F(x))$. To avoid
this attack we tak $A_1$ such that $d_1=\frac{1}{\det(A_1)}\mod{q^n-1}$
has a expansion in base~$p$ with $d_1=[K_0,\dots,K_e ]$ with at least $s_1$
non vanishing digist and the same with $B_2$ and $d_2=\frac{1}{\det(B_2)}$
(with at least $t_1$ non vanishing digits). The details of values of $t_1,s_1$
will be given when discussing the security of the system.

The public key of the system is $K_P=(h,\pi_0,F)$ and the private key is
given by $h$, $\pi_0$ and the five maps $L_1,\dots,L_3$ and their inverses
that can be used to encrypt and decrypt. Given an encrypted message $z=F(\underline{x})=
DM(\overline{x})$, one compute $\underline{x}=F^{-1}(z)$ and discard the random entries
with the use of~$h$.

It is possible to get the monomials of the $F_i$ without computing the composition
of the five maps as follows: we start with $m$ lists that contain
the coordinates of the $\underline{x}_i$, $M_{11}=[x_{11},\dots,x_{1n}]$, \dots,
$M_{mn}=[x_{m1},\dots,x_{mn}]$, and we define the operations on lists: multiplication
and exponentiation. If $S=[s_1,\dots,s_m]$, $T=[t_1,\dots,t_m]$ then
$S\cdot T=[s_i\cdot t_i]$ and $S^a=[s_i^a]$.

With these notations, one can see that the exponential $G_1$ produce, on each component,
polynomials whose list of monomials is $N_{0k}=M_{01}^{a_{k1}}\cdot\ldots\cdot M_{0n}^{a_{kn}}$.

The mixing map $M$ determines that in the list of monomials of each $x'_k$ appears
the list $N_{0k}$, joint with the list $N_{0j}$ of the vectors that are placed
at the $m-n$ last entreis of $x'_k$. If $b_k$ is the number of vectors adjoined
to $x'_k$ then, if we denote by $P_{0k}$ ($k=1,\dots,n$) such list, then the final
list of monomials of each component after $G_2$ to each monomial ${x'_1}^{b_{k1}}\cdot\ldots\cdot{x'_n}^{b_{kn}}$ gives $Q_{0k}=P_{01}^{b_{k1}}\cdot\ldots\cdot P_{0n}^{b_{kn}}$.

Notice that when we apply the final $\gfq$-linear bijection $\tilde{L}_3$,
each component still have the same monomial, than means that there are $n$ groups
of $m$ polynomials $F_{k1},\dots,F_{km}$ such that they have the same monomials,
namely the list $Q_{0k}$.

It is clear that the number of monomials of $Q_{0k}$ is at most $((1+b_k)\cdot n^s)^t$.
So if we denote by $b_{\max}=\max_k(1+b_k)$, we get on each component
at most $(b_{\max}\cdot n^s)^t$ monomials.




Once we get the list of monomials of the $F_i$
one gets the coefficient of each group of polynomials by evaluating the polynomials
$F_{k1},...F_{km}$ set of pairs $(\underline{c},F_{ki}(\underline{c}))$
big enough to guarantee that the corresponding linear equation are independendents. 
That is if $Q_k=[q_1...q_d]$ and $F_{kj}=\sum_{i=1}^d f_{ji} q_i(x)$ 
we take vector $\underline{c}_1,\dots,\underline{c}_R$ such that the linear equations (on the $f_{ij}$)
$F_k(c_e )=\sum f_{ji} q_i(c_e )$
 are independent and can be resolved to get coefficient of the polynomials 
 $F_{k1},\dots,F_{km}$.
This algorithm is implemented in the system to get the public key from the private key.
 
It is also possible to use this algorithm to get a fast evaluation of the $F_{ij}(\underline{c})$ to  encript a  message. 
If we  start with the list of the coordinates of $\underline{c}$ instead of the list of variables in the algorithm we get at the end a list of the evaluated monomials $[q_j(\underline{c})]$. In order to   evaluate the polynomials 
$F_{kj}(\underline{c})=\sum_{i=1}^d f_{ji} q_i(\underline{c})$
one needs only to write their cofficients   $f_{ij}$  in a matrix $MF_k=(f_{ji})$ and compute a matrix multiplication $b_i(x)\cdot MF_k$.

\section*{Summary  of the system DME}
Fix parameters $(m,n,s,t,N,S)$, a field $\gfq$ with $q=p^e$ and an $\mathbb{F}_q$-isomorphism 
$\pi_0:\mathbb{F}_p^e \to\mathbb{F}_{p^e }$.
The public key is $K_P=(h,\pi_0,F)$ or  $K_P=(h,\pi_0,F,A_1,B_2)$ if we allow to use the fast evaluation algorithm.
The private key are the maps $L_1,G_1,L_2,G_2,L_3$ defined by the matrices 
$A_{1i},A_{2j},A_{3j}$, the exponent matrices
$A_1$ and $B_2$ and the mixing map $M$. 
The $\mathbb{F}_q$-linear isomorphisms $\pi_1:\mathbb{F}_q^n\to\mathbb{F}_{q^n}$
and $\pi_2:\mathbb{F}_q^m\to\mathbb{F}_{q^m}$
are not needed for encryption and can be chosen once for all users of the system or individually for its user and  form part of the private key.



The exponent matrices $A_1$ and $B_2$ can be deduced from the exponents of the monomials in $F_i$ so there is no need to hide them and can be made public in order to use them for the fast method to evaluate the polinomials of the public key.

\section*{Digital signature nnd KEM with the system}
The system can be used to sign  a message in $
(\mathbb{F}_q^m\setminus\{0\})^n
$ by computing $F^{-1}(z)$. As $F$ is not surjective onto 
$(\mathbb{F}_q^m\setminus\{0\})^n$ there are messages that can not be signed. 
One need to add some randoness to the message.
Given $z\in(\mathbb{F}_q^m\setminus\{0\})^n$ there exists $x\in F^{-1}(z)$
if $(L_3\circ F\circ L_2)^{-1}(z)\in(\mathbb{F}_q^n\setminus\{0\})^m$, so the probability
for $z\notin\operatorname{Im}(F)$ is of order~$\frac{1}{q^n}$.

One can sign a message $v$ in $(F_p)^{N_1}$, $N_1<e  n$, by padding it in a similar way that we do for encript a message.
We need to coose a map $h_1:\{1,\dots,N_1\} \to  \{1,\dots,e\cdot n\cdot m\}$ and fill the entries not in $\operatorname{Im}(h_1)$. There is a  difference  with the encrpytation it is the fact that $N_1$ need not to be fixed a priori. 
The signature of a message $z_0\in (\mathbb{F}_p)^{N_1}$ is 
$\operatorname{sig}(z_0)=(x,z_0,h_1)$ such that there exist $x=F^(-1)(z)$. 
If it does not exist we padd again $z_0$ to get a different $z$.
For the verification of the signature one computes $F(x)=z$ and trows away the random digits to get $z_0$.

If given two parties $A$ and $B$, $A$ want to send an encrypted message $x$ to $B$, 
$A$ encrypt $x$ with the public key 
of $B$ obtainig $z \in (\mathbb{F}_q)^{nm}$ that can not be padded because 
$N_1=e\cdot n\cdot m$. 
If is not possible to get the signature $y=(F_A)^{-1}(z)$ one can encrypt $x$ again (because the system is not deterministic) up to get a message that can be signed.

The system can be used for KEM in a standard way but for KEM there is no need to use the padding. 
If two parties want to share a key for a symmetric system like AES they pick up  a hash fonction and 
one of them $A$ choose a random $x \in (\mathbb{F}_q)^{nm}$ with $x_i \neq 0$ 
and send $z=F_B(x)$ to $B$ who decrypt $z$ and both parties compute the common hash.


\section*{The setting of the system DME that is implemented in the proposal}

We take $m=3$, $n=2$, $s=t=2$ and $q=2^e$. The number of monomials of each component is $(2\cdot n^s)^t=64$.
The polynomial map of the public key is $F=(F_1,\dots,F_6): (\mathbb{F}_2^e)^6 \to (\mathbb{F}_2^e)^6 $ where $F_1,F_2,F_3$ share
64 monomials and $F_4,F_5,F_6$ share other 64 monomials. 
For 128 bit security we propose $q=2^{24}$ that is the message space is $(\mathbb{F}_2)^{144}$.
We will justify this choice when we discuss the security in the corresponding paragraph.
For the padding we can add from 3 to 16 bits. For instance if we add only 3 bits one $'1'$ in 
each coordinate $x_{12},x_{22}$ and $x_{32}$; one gets a deterministic public key system. 
We choose to add 12 random bits, 4 bits in each coordinate so the encryption map are 
$DM: (\mathbb{F}_2)^{132}\to (\mathbb{F}_2)^{144}$
\begin{center}
 \begin{tikzcd}
\mathbb{F}_{2}^{132}
\arrow[r,"H"]&\mathbb{F}_{2^{24}}^{6}
\arrow[r,"F" ]&\mathbb{F}_{2^{24}}^{6}
\end{tikzcd}
\end{center}
for 128 bit.

For 256 bit security we propose $q=2^{48}$ that is the message space is 
$(\mathbb{F}_2)^{288}$ with 24 random bits that is the  encryption map is 
$DM: (\mathbb{F}_2)^{132}\to (\mathbb{F}_2)^{144}.$
\begin{center}
 \begin{tikzcd}
\mathbb{F}_{2}^{264}
\arrow[r,"H"]&\mathbb{F}_{2^{48}}^{6}
\arrow[r,"F" ]&\mathbb{F}_{2^{48}}^{6}
\end{tikzcd}
\end{center}



We will discuss here the security of DME-(3,2,48) that produce a 288 bits message. We claim that it reach the level 5 of security 
that  it is as dificult to break as AES-256 by classical attacks. The same arguments aply to  DME-(3,2,24)(128 bits) or  
DME-(3,2,36)(192 bits). We have stimate the security agains Grobner basis attack and the other standard attacks against multivariate
systems and some standard  structural atacks. As the resulting polynomials are very structurated it is reasonable to imagine that 
there are other structural atacks but we where unable to study this question by lack of time.  In fact the system DME is very recent, 
it was finished in November 2017 and need further studies, but as the NIST rules do not allow to  send  proposals after the deadline, 
we will pursue the study of structural atacks along with the rest of the PQCrypto community.

Algebraic attacks


We have made many computer experiments using MAGMA and its implementation of the Faugere algorithm F4 with the public key polynomilas 
DME-(3,2,e). for 2<e<9. Our stimations are partials because F4 can find the Grobner only until e=5 (30 bits). For  e=6 or highther 
F4 can not find the Grobner bases because it exausted the avalaible RAM memory (512GB). Our conclusions are:

\begin{itemize}
 \item The highest degree of the steps in algorithm is at least $q$. If one compute the number of operations  for the Grobner Basis algorithm
 at this degree it is much biger tha $q^6$, but of course the system it is not generic.
 \item The number of monomials involved in the computations is at least $q^4$. One can also estimate the   size of the marix involved 
 in the algorithm. Notice also given the matrix of exponents   the number of solutions of the system over the algebraic closure of 
 $F_q$ can be made at least $q^3$ and this afect to the size of the intermediate computations. 
 \item It is safe to estimate that the number of binary operations in the Grobner basis algorithm for DME-$(3,2,2^e)$ is at least $2^e$.
 
\end{itemize}

One can fix $r$ of the variables and solve the system for the remaining $6-r$ variables, but the bound on the number of operation is 
basically the same. Let us asume that $q=2^{48}$,  ff we fix $5$ variables get 6 polynomials in one variable with degree that we may 
assume that is at least $2^{24}$. We can use the Euclides algorithm but as we have to try $2^{48\cdot 5}=2^{240}$ times, it clear that the 
number of binary operations at least $2^{256}.$
For $r=4,3,2,1$ one has to solve a $2^{48r}$ systems in $r$ variables and the the estimates are similar as above.

Other possible attack is to represent the map $F$ as a  polynomial $P$ in one variable over $(F_q)^6$.  As F send the coordinate $2$-planes to $0$ the d
the degree of $P$ is at least $q^2$ and it will cost more than $q^6$ bit operations to get $P.$

Other standard attack is to $F$ as a polinomial $Q$ map over $F_2$. Each the monomials of F involves 4 variables with exponents $2^a$ the  polynomials in $Q$ will have degree up to $4$. The total number of monomials of degree up to 4 in $288$ variables  is of the order of $2^{28}$. 
It is not sharp estimates of the Grobner basis complexity for cuartic polynomials, this has to be closely investigated but I beleive that 
the hypotesis that the  complexity   of solving the resulting system of $288$ equation is at least $2^{256}$ is realistic. In fact this attack 
and the next one are  the main  reason to take two exponentiations. Let us remark that there is a straightforward modification of the parameter 
tak make the system more secure again this attack. If we allow two of the rows of the matrix $A_1$ to have $3$ non zero entries then the total 
number of final monomials is $144$ with $6$ variables each.

As we have mentioned earlier the inverse of $F$ is also polynomial but if we take the matrices $A_1$ and $B_2$ such that the inverse of their 
determinants has a big binary weight then the number of the monomials of $F^{-1}$ will be exponentially hight. For instance for $q=2^{48}$ we 
may assume that the inverse of the $det(B_2)$ mod $q^3-1$ has at least binary weight $40$. By  applying the algorithm to compute the monomials
to the list of $64=2^6$ monomials we get a list of $(2^6)^{40}$. As the total number of monomials on $6$ variables of degree at most $q$ 
is around
$q^6$ many of the monomial of the list will be equal, but we can assume that for a generic matrix the total number will be more than $2^{40}$.
After that we have to aply $G_{A_{1}}$ and we can estimate that the final  list will have at least $2^{100}$. This is one of the strongest properties 
of the system that produce invertible maps with $64$ monomials but the inverse can have more than $2^{100}.$

Probabbly the most dangerous attack to this kind of sytem is a structural attack. For instance we can set as variables the entries of the marices of 
$L_1,L_2,L_3$ and compute the coefficients of the monomials. If we want to solve the resulting equations we will get $6\cdot 64$ equations in $48$
variables of degree up to $q$. This seams a hopeless task but as the resulting cofficient are very structured may be ther is some 
feasible attack.

Advantages and   disadvantage of the DME system.

The main disadvantage of the system is that is very new, probably sure against standard attacks but it is not clear his resistence against 
possible new attacks.

{Advantages}
\begin{itemize}
 \item It is very easy to adapt the parameters with modest decrease of the performance of the system. For instance we can increase $e$, let say 
 $q=2^{60}$ or to take $m=4,5,6$ or increase the number of nonzero entries in $A_1$.
 \item The system is mathematically very simple. Only a precise number of mulplication and exponentiations are use.  For this reason it is
 easy to protect the system against timing side channel attacks.
 \item The system can encrypt and decrypt 
 without failures. 
  \item Digital signatures can fail the probability of failure is $1/q^2$ but this can be fixed with a small padding.
 \item KEM is straightforward and do not need padding.
 \item Encription and signature verification can be speed up using a logarithm table if $e$ is not to big that make storage   
 and looking at the table impractical. This property can be very usefull for servers that had to verify thousands of signatures per second. 
\end{itemize}





\begin{thebibliography}{15}
 
\bibitem{D}  I. Luengo, \emph{DME a  public key, signature and KEM system based on double exponentiation  with matrix exponents}, preprint 2017.

\end{thebibliography}







\end{document}

The main part of the design of the system are the two exponential maps build using monomial maps as follows

If x=(x_1....are the initial coordinates then the composition of the five maps and L1 g1 L2 g2 and L3 allow us to compute the component of F asÂ  Â polynomials in F_1[...].
In order to keep small the number of monomials we choose the matrices A1 and B2 with the following properties:

(1). The entriesÂ  of A_1 and B_2 areÂ  Â powers of p.

(2). We fix to integersÂ  s and tÂ  such that eacht row of A_1 has atÂ  most sÂ  entries diferent from zero andÂ  eacht row of B_2 has atÂ  most tÂ  entries different from zero. One can compute the monomials in the algorithm describedÂ  below and the total number of monomials isÂ  MON=... where bÂ  depends onÂ  Â the mixing M.

The inverseÂ  maps G1 and G2 can be computed in the same way from the inverse matrices ofÂ  of A_1 B_2, so Fâ?-1) is alsoÂ  Â  a polynomial map on the image of F. If the number of monomials of Fâ?-1) is not big enoughtÂ  one canÂ  Â get the coefficient of the polynomials by computingÂ  enough number of pairs (x,F(x)). To avoid this attack we can take A_1 such that if d_1=... and if expansion in base p is [ko,,,KeÂ  Â then at least s_1 of the digits ki are non zero. In the same way can take B_2 such that if d_2=... and if itsÂ  expansion in base p is [ko,,,KeÂ  then at least t_1 of the digits ki are non zero. We will give the details of the values of s1 and t1 when we discuss the security of the system


We will discuss here the security of DME-(3,2,48) that produce a 288 bits message. We claim that it reach the level 5 of security 
that  it is as dificult to break as AES-256 by classical attacks. The same arguments aply to  DME-(3,2,24)(128 bits) or  
DME-(3,2,36)(192 bits). We have stimate the security agains Grobner basis attack and the other standard attacks against multivariate
systems and some standard  structural atacks. As the resulting polynomials are very structurated it is reasonable to imagine that 
there are other structural atacks but we where unable to study this question by lack of time.  In fact the system DME is very recent, 
it was finished in November 2017 and need further studies, but as the NIST rules do not allow to  send  proposals after the deadline, 
we will pursue the study of structural atacks along with the rest of the PQCrypto community.

Algebraic attacks


We have made many computer experiments using MAGMA and its implementation of the Faugere algorithm F4 with the public key polynomilas 
DME-(3,2,e). for 2<e<9. Our stimations are partials because F4 can find the Grobner only until e=5 (30 bits). For  e=6 or highther 
F4 can not find the Grobner bases because it exausted the avalaible RAM memory (512GB). Our conclusions are:

\begin{itemize}
 \item The highest degree of the steps in algorithm is at least $q$. If one compute the number of operations  for the Grobner Basis algorithm
 at this degree it is much biger tha $q^6$, but of course the system it is not generic.
 \item The number of monomials involved in the computations is at least $q^4$. One can also estimate the   size of the marix involved 
 in the algorithm. Notice also given the matrix of exponents   the number of solutions of the system over the algebraic closure of 
 $F_q$ can be made at least $q^3$ and this afect to the size of the intermediate computations. 
 \item It is safe to estimate that the number of binary operations in the Grobner basis algorithm for DME-$(3,2,2^e)$ is at least $2^e$.
 
\end{itemize}

One can fix $r$ of the variables and solve the system for the remaining $6-r$ variables, but the bound on the number of operation is 
basically the same. Let us asume that $q=2^{48}$, if we fix $5$ variables get 6 polynomials in one variable with degree that we may 
assume tha is at least $2^24$. We can use the Euclides algorithm but as we have to try $2^{48\cdot 5)=2^{240}$ times, it clear that the 
number of binary operations at least $2^256.$
For $r=4,3,2,1$ one has to solve a $2^{48r}$ systems in $r$ variables and the the estimates are similar as above.

Other possible attack is to represent the map $F$ as a  polynomial $P$ in one variable over $(F_q)^6$.  As F send the coordinate $2$-planes to $0$ the d
the degree of $P$ is at least $q^2$ and it will cost more than $q^6$ bit operations to get $P.$

Other standard attack is to $F$ as a polinomial $Q$ map over $F_2$. Each the monomials of F involves 4 variables with exponents $2^a$ the 
polynomials in $Q$ will have degree up to $4$. The total number of monomials of degree up to 4 in $288$ variables  is of the order of $2^{28}$. 
It is not sharp estimates of the Grobner basis complexity for cuartic polynomials, this has to be closely investigated but I beleive that 
the hypotesis that the  complexity   of solving the resulting system of $288$ equation is at least $2^{256}$ is realistic. In fact this attack 
and the next one are  the main  reason to take two exponentiations. Let us remark that there is a straightforward modification of the parameter 
tak make the system more secure again this attack. If we allow two of the rows of the matrix $A1$ to have $3$ non zero entries then the total 
number of final monomials is $144$ with $6$ variables each.

As we have mentioned earlier the inverse of $F$ is also polynomial but if we take the matrices $A1$ and $B2$ such that the inverse of their 
determinants has a big binary weight then the number of the monomials of $F^{-1}$ will be exponentially hight. For instance for $q=2^48$ we 
may assume that the inverse of the $det(B_2)$ mod $q^3-1$ has at least binary weight $40$. By  applying the algorithm to compute the monomials
to the list of $64=2^6$ monomials we get a list of $(2^6)^{40}$. As the total number of monomials on $6$ variables of degree at most $q$ 
is around
$q^6$ many of the monomial of the list will be equal, but we can assume that for a generic matrix the total number will be more than $2^{40}$.
After that we have to aply $G_A_{1}$ and we can estimate that the final  list will have at least $2^{100}$. This is one of the strongest properties 
of the system that produce invertible maps with $64$ monomials but the inverse can have more than $2^{100}.$

Probabbly the most dangerous attack to this kind of sytem is a structural attack. For instance we can set as variables the entries of the marices of 
$L_1,L_2,L_3$ and compute the coefficients of the monomials. If we want to solve the resulting equations we will get $6\cdot 64$ equations in $48$
variables of degree up to $q$. This seams a hopeless task but as the resulting cofficient are very structured may be ther is some 
feasible attack.

Advantages and   disadvantage of the DME system.

The main disadvantage of the system is that is very new, probably sure against standard attacks but it is not clear his resistence against 
possible new attacks.

{Advantages}
\begin{itemize}
 \item It is very easy to adapt the parameters with modest decrease of the performance of the system. For instance we can increase $e$, let say 
 $q=2^60$ or to take $m=4,5,6$ or increase the number of nonzero entries in $A_1$.
 \item The system is mathematically very simple. Only a precise number of mulplication and exponentiations are use.  For this reason it is
 easy to protect the system against timing side channel attacks.
 \item The system can encrypt and decrypt 
 without failures. 
  \item Digital signatures can fail the probability of failure is $1/q^2$ but this can be fixed with a small padding.
 \item KEM is straightforward and do not need padding.
 \item Encription and signature verification can be speed up using a logarithm table if $e$ is not to big that make storage   
 and looking at the table impractical. This property can be very usefull for servers that had to verify thousands of signatures per second. 
\end{itemize}











